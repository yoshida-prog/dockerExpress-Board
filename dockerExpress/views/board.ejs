<!DOCTYPE html>
<html>

  <head>
    <title>掲示板 - みんなの投稿</title>
    <link href="http://fonts.googleapis.com/earlyaccess/notosansjp.css">
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>

  <body>

    <header>
      <div class="headerLeft">
        Node.js Bulletin Board
      </div>
      <div class="headerRight">
        <a href="/board">みんなの投稿</a>
        <a href="/create">投稿を作成</a>
        <ul class="menu">
            <li class="menu__single">
                <div class="init-bottom"><span><%= username %></span><span class="arrow-pointer">▼</span></div>
                <ul class="menu__second-level">
                    <li><a href="/logout">ログアウト</a></li>
                </ul>
            </li>
        </ul>
      </div>
    </header>

    <main>
      <% posts.forEach((value, key) => { %>
        <div class="viewContainer">
          <h3><%= value.title %></h3>
          <p class="postContent"><%= value.content %></p>
          <p class="ontributor">投稿者： <%= value.username %></p>
          <form class="favoriteForm">
            <input class="favoriteBtn" type="button" value="&#9825;"><span class="favoriteCount" data-contentid="<%= value.id %>">0</span>
          </form>
          <% if (username === value.username) { %>
            <span>
              <button class="editBtn" type="submit" value="<%= value.id %>">編集</button>
              <button class="deleteBtn" type="submit" value="<%= value.id %>">削除</button>
            </span>
          <% } %>
        </div>
      <% }); %>
    </main>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // いいねボタンのFetchAPIのPOST送信
        const favoriteForm = document.querySelectorAll('.favoriteForm input');
        const favoriteBtn = document.querySelectorAll('.favoriteBtn');
        const url = '/favorite';
        const postFavorite = (e) => {
          const contentID = e.target.nextElementSibling.dataset.contentid;
          const favoriteCount = e.target.nextElementSibling.innerText;
          console.log(e.target.value);
          if (e.target.value === '') {
            console.log('OK');
          }
          const formData = {
            contentID,
            favoriteCount
          };
          // ここにハートマークを反転させる処理を追加する。
          fetch(url, {
            method: 'POST',
            headers: {
              'Content-type': 'application/json'
            },
            body: JSON.stringify(formData)
          }).then((respose) => {
            if (!respose.ok) {
              throw 'favorite post error!';
            }
            console.log('OK');
            return respose.text();
          }).catch(error => {
            alert(error);
          });
        };
        for(var i = 0; i < favoriteBtn.length; i++) {
          // ここにいいね済みかどうかで、inputのvalue属性をどのハートにするか決める。
          favoriteBtn[i].addEventListener('click', postFavorite, false);
        };

        // 編集・削除ボタンを動的に作成
        const editBtns = document.querySelectorAll('.editBtn');
        const deleteBtns = document.querySelectorAll('.deleteBtn');
        for(var i = 0; i < editBtns.length; i++) {
          editBtns[i].addEventListener('click', (e) => {
            const form = document.createElement('form');
            const editId = e.target.value;
            form.action = '/edit/' + editId;
            form.method = 'GET';
            document.body.append(form);
            form.submit();
          });
        };
        for(var i = 0; i < deleteBtns.length; i++) {
          deleteBtns[i].addEventListener('click', (e) => {
            const form = document.createElement('form');
            const deleteId = e.target.value;
            form.action = '/delete/' + deleteId;
            form.method = 'GET';
            document.body.append(form);
            form.submit();
          });
        };
      });
    </script>

  </body>

</html>
